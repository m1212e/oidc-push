"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTime

input DateWhereInputArgument {
  AND: [DateWhereInputArgument!]
  NOT: DateWhereInputArgument
  OR: [DateWhereInputArgument!]
  arrayContained: [Date!]
  arrayContains: [Date!]
  arrayOverlaps: [Date!]
  eq: Date
  gt: Date
  gte: Date
  ilike: String
  in: [Date!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: Date
  lte: Date
  ne: Date
  notIlike: String
  notIn: [Date!]
  notLike: String
}

input FloatWhereInputArgument {
  AND: [FloatWhereInputArgument!]
  NOT: FloatWhereInputArgument
  OR: [FloatWhereInputArgument!]
  arrayContained: [Float!]
  arrayContains: [Float!]
  arrayOverlaps: [Float!]
  eq: Float
  gt: Float
  gte: Float
  ilike: String
  in: [Float!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: Float
  lte: Float
  ne: Float
  notIlike: String
  notIn: [Float!]
  notLike: String
}

input IntWhereInputArgument {
  AND: [IntWhereInputArgument!]
  NOT: IntWhereInputArgument
  OR: [IntWhereInputArgument!]
  arrayContained: [Int!]
  arrayContains: [Int!]
  arrayOverlaps: [Int!]
  eq: Int
  gt: Int
  gte: Int
  ilike: String
  in: [Int!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: Int
  lte: Int
  ne: Int
  notIlike: String
  notIn: [Int!]
  notLike: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  todo(id: ID!): User
}

type Query {
  findFirstUser(where: UserWhereInputArgument): User!
  findManyUser(limit: Int, offset: Int, where: UserWhereInputArgument): [User!]!
}

input StringWhereInputArgument {
  AND: [StringWhereInputArgument!]
  NOT: StringWhereInputArgument
  OR: [StringWhereInputArgument!]
  arrayContained: [String!]
  arrayContains: [String!]
  arrayOverlaps: [String!]
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  isNotNull: Boolean
  isNull: Boolean
  like: String
  lt: String
  lte: String
  ne: String
  notIlike: String
  notIn: [String!]
  notLike: String
}

type Subscription {
  findFirstUser(where: UserWhereInputArgument): User!
  findManyUser(limit: Int, offset: Int, where: UserWhereInputArgument): [User!]!
}

type User {
  createdAt: DateTime!
  email: String!
  familyName: String!
  givenName: String!
  id: ID!
  locale: String
  ntfyTopic: String
  preferredUsername: String!
  updatedAt: DateTime
}

input UserWhereInputArgument {
  createdAt: DateWhereInputArgument
  email: StringWhereInputArgument
  familyName: StringWhereInputArgument
  givenName: StringWhereInputArgument
  id: ID
  locale: StringWhereInputArgument
  ntfyTopic: StringWhereInputArgument
  preferredUsername: StringWhereInputArgument
  updatedAt: DateWhereInputArgument
}
